"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TextareaWidget(props) {
  var id = props.id,
      options = props.options,
      placeholder = props.placeholder,
      value = props.value,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus;

  var _onChange = function _onChange(_ref) {
    var value = _ref.target.value;
    return onChange(value === "" ? options.emptyValue : value);
  };

  return /*#__PURE__*/_react.default.createElement("textarea", {
    id: id,
    className: "form-control",
    value: value ? value : "",
    placeholder: placeholder,
    required: required,
    disabled: disabled,
    readOnly: readonly,
    autoFocus: autofocus,
    rows: options.rows,
    onBlur: onBlur && function (event) {
      return onBlur(id, event.target.value);
    },
    onFocus: onFocus && function (event) {
      return onFocus(id, event.target.value);
    },
    onChange: _onChange
  });
}

TextareaWidget.defaultProps = {
  autofocus: false,
  options: {}
};

if (process.env.NODE_ENV !== "production") {
  TextareaWidget.propTypes = {
    schema: _propTypes.default.object.isRequired,
    id: _propTypes.default.string.isRequired,
    placeholder: _propTypes.default.string,
    options: _propTypes.default.shape({
      rows: _propTypes.default.number
    }),
    value: _propTypes.default.string,
    required: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    readonly: _propTypes.default.bool,
    autofocus: _propTypes.default.bool,
    onChange: _propTypes.default.func,
    onBlur: _propTypes.default.func,
    onFocus: _propTypes.default.func
  };
}

var _default = TextareaWidget;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3dpZGdldHMvVGV4dGFyZWFXaWRnZXQuanMiXSwibmFtZXMiOlsiVGV4dGFyZWFXaWRnZXQiLCJwcm9wcyIsImlkIiwib3B0aW9ucyIsInBsYWNlaG9sZGVyIiwidmFsdWUiLCJyZXF1aXJlZCIsImRpc2FibGVkIiwicmVhZG9ubHkiLCJhdXRvZm9jdXMiLCJvbkNoYW5nZSIsIm9uQmx1ciIsIm9uRm9jdXMiLCJfb25DaGFuZ2UiLCJ0YXJnZXQiLCJlbXB0eVZhbHVlIiwicm93cyIsImV2ZW50IiwiZGVmYXVsdFByb3BzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwicHJvcFR5cGVzIiwic2NoZW1hIiwiUHJvcFR5cGVzIiwib2JqZWN0IiwiaXNSZXF1aXJlZCIsInN0cmluZyIsInNoYXBlIiwibnVtYmVyIiwiYm9vbCIsImZ1bmMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLFNBQVNBLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQStCO0FBQzdCLE1BQ0VDLEVBREYsR0FZSUQsS0FaSixDQUNFQyxFQURGO0FBQUEsTUFFRUMsT0FGRixHQVlJRixLQVpKLENBRUVFLE9BRkY7QUFBQSxNQUdFQyxXQUhGLEdBWUlILEtBWkosQ0FHRUcsV0FIRjtBQUFBLE1BSUVDLEtBSkYsR0FZSUosS0FaSixDQUlFSSxLQUpGO0FBQUEsTUFLRUMsUUFMRixHQVlJTCxLQVpKLENBS0VLLFFBTEY7QUFBQSxNQU1FQyxRQU5GLEdBWUlOLEtBWkosQ0FNRU0sUUFORjtBQUFBLE1BT0VDLFFBUEYsR0FZSVAsS0FaSixDQU9FTyxRQVBGO0FBQUEsTUFRRUMsU0FSRixHQVlJUixLQVpKLENBUUVRLFNBUkY7QUFBQSxNQVNFQyxRQVRGLEdBWUlULEtBWkosQ0FTRVMsUUFURjtBQUFBLE1BVUVDLE1BVkYsR0FZSVYsS0FaSixDQVVFVSxNQVZGO0FBQUEsTUFXRUMsT0FYRixHQVlJWCxLQVpKLENBV0VXLE9BWEY7O0FBYUEsTUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksT0FBMkI7QUFBQSxRQUFkUixLQUFjLFFBQXhCUyxNQUF3QixDQUFkVCxLQUFjO0FBQzNDLFdBQU9LLFFBQVEsQ0FBQ0wsS0FBSyxLQUFLLEVBQVYsR0FBZUYsT0FBTyxDQUFDWSxVQUF2QixHQUFvQ1YsS0FBckMsQ0FBZjtBQUNELEdBRkQ7O0FBR0Esc0JBQ0U7QUFDRSxJQUFBLEVBQUUsRUFBRUgsRUFETjtBQUVFLElBQUEsU0FBUyxFQUFDLGNBRlo7QUFHRSxJQUFBLEtBQUssRUFBRUcsS0FBSyxHQUFHQSxLQUFILEdBQVcsRUFIekI7QUFJRSxJQUFBLFdBQVcsRUFBRUQsV0FKZjtBQUtFLElBQUEsUUFBUSxFQUFFRSxRQUxaO0FBTUUsSUFBQSxRQUFRLEVBQUVDLFFBTlo7QUFPRSxJQUFBLFFBQVEsRUFBRUMsUUFQWjtBQVFFLElBQUEsU0FBUyxFQUFFQyxTQVJiO0FBU0UsSUFBQSxJQUFJLEVBQUVOLE9BQU8sQ0FBQ2EsSUFUaEI7QUFVRSxJQUFBLE1BQU0sRUFBRUwsTUFBTSxJQUFLLFVBQUFNLEtBQUs7QUFBQSxhQUFJTixNQUFNLENBQUNULEVBQUQsRUFBS2UsS0FBSyxDQUFDSCxNQUFOLENBQWFULEtBQWxCLENBQVY7QUFBQSxLQVYxQjtBQVdFLElBQUEsT0FBTyxFQUFFTyxPQUFPLElBQUssVUFBQUssS0FBSztBQUFBLGFBQUlMLE9BQU8sQ0FBQ1YsRUFBRCxFQUFLZSxLQUFLLENBQUNILE1BQU4sQ0FBYVQsS0FBbEIsQ0FBWDtBQUFBLEtBWDVCO0FBWUUsSUFBQSxRQUFRLEVBQUVRO0FBWlosSUFERjtBQWdCRDs7QUFFRGIsY0FBYyxDQUFDa0IsWUFBZixHQUE4QjtBQUM1QlQsRUFBQUEsU0FBUyxFQUFFLEtBRGlCO0FBRTVCTixFQUFBQSxPQUFPLEVBQUU7QUFGbUIsQ0FBOUI7O0FBS0EsSUFBSWdCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQTdCLEVBQTJDO0FBQ3pDckIsRUFBQUEsY0FBYyxDQUFDc0IsU0FBZixHQUEyQjtBQUN6QkMsSUFBQUEsTUFBTSxFQUFFQyxtQkFBVUMsTUFBVixDQUFpQkMsVUFEQTtBQUV6QnhCLElBQUFBLEVBQUUsRUFBRXNCLG1CQUFVRyxNQUFWLENBQWlCRCxVQUZJO0FBR3pCdEIsSUFBQUEsV0FBVyxFQUFFb0IsbUJBQVVHLE1BSEU7QUFJekJ4QixJQUFBQSxPQUFPLEVBQUVxQixtQkFBVUksS0FBVixDQUFnQjtBQUN2QlosTUFBQUEsSUFBSSxFQUFFUSxtQkFBVUs7QUFETyxLQUFoQixDQUpnQjtBQU96QnhCLElBQUFBLEtBQUssRUFBRW1CLG1CQUFVRyxNQVBRO0FBUXpCckIsSUFBQUEsUUFBUSxFQUFFa0IsbUJBQVVNLElBUks7QUFTekJ2QixJQUFBQSxRQUFRLEVBQUVpQixtQkFBVU0sSUFUSztBQVV6QnRCLElBQUFBLFFBQVEsRUFBRWdCLG1CQUFVTSxJQVZLO0FBV3pCckIsSUFBQUEsU0FBUyxFQUFFZSxtQkFBVU0sSUFYSTtBQVl6QnBCLElBQUFBLFFBQVEsRUFBRWMsbUJBQVVPLElBWks7QUFhekJwQixJQUFBQSxNQUFNLEVBQUVhLG1CQUFVTyxJQWJPO0FBY3pCbkIsSUFBQUEsT0FBTyxFQUFFWSxtQkFBVU87QUFkTSxHQUEzQjtBQWdCRDs7ZUFFYy9CLGMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcclxuXHJcbmZ1bmN0aW9uIFRleHRhcmVhV2lkZ2V0KHByb3BzKSB7XHJcbiAgY29uc3Qge1xyXG4gICAgaWQsXHJcbiAgICBvcHRpb25zLFxyXG4gICAgcGxhY2Vob2xkZXIsXHJcbiAgICB2YWx1ZSxcclxuICAgIHJlcXVpcmVkLFxyXG4gICAgZGlzYWJsZWQsXHJcbiAgICByZWFkb25seSxcclxuICAgIGF1dG9mb2N1cyxcclxuICAgIG9uQ2hhbmdlLFxyXG4gICAgb25CbHVyLFxyXG4gICAgb25Gb2N1cyxcclxuICB9ID0gcHJvcHM7XHJcbiAgY29uc3QgX29uQ2hhbmdlID0gKHsgdGFyZ2V0OiB7IHZhbHVlIH0gfSkgPT4ge1xyXG4gICAgcmV0dXJuIG9uQ2hhbmdlKHZhbHVlID09PSBcIlwiID8gb3B0aW9ucy5lbXB0eVZhbHVlIDogdmFsdWUpO1xyXG4gIH07XHJcbiAgcmV0dXJuIChcclxuICAgIDx0ZXh0YXJlYVxyXG4gICAgICBpZD17aWR9XHJcbiAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgIHZhbHVlPXt2YWx1ZSA/IHZhbHVlIDogXCJcIn1cclxuICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxyXG4gICAgICByZXF1aXJlZD17cmVxdWlyZWR9XHJcbiAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cclxuICAgICAgcmVhZE9ubHk9e3JlYWRvbmx5fVxyXG4gICAgICBhdXRvRm9jdXM9e2F1dG9mb2N1c31cclxuICAgICAgcm93cz17b3B0aW9ucy5yb3dzfVxyXG4gICAgICBvbkJsdXI9e29uQmx1ciAmJiAoZXZlbnQgPT4gb25CbHVyKGlkLCBldmVudC50YXJnZXQudmFsdWUpKX1cclxuICAgICAgb25Gb2N1cz17b25Gb2N1cyAmJiAoZXZlbnQgPT4gb25Gb2N1cyhpZCwgZXZlbnQudGFyZ2V0LnZhbHVlKSl9XHJcbiAgICAgIG9uQ2hhbmdlPXtfb25DaGFuZ2V9XHJcbiAgICAvPlxyXG4gICk7XHJcbn1cclxuXHJcblRleHRhcmVhV2lkZ2V0LmRlZmF1bHRQcm9wcyA9IHtcclxuICBhdXRvZm9jdXM6IGZhbHNlLFxyXG4gIG9wdGlvbnM6IHt9LFxyXG59O1xyXG5cclxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gIFRleHRhcmVhV2lkZ2V0LnByb3BUeXBlcyA9IHtcclxuICAgIHNjaGVtYTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG4gICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgb3B0aW9uczogUHJvcFR5cGVzLnNoYXBlKHtcclxuICAgICAgcm93czogUHJvcFR5cGVzLm51bWJlcixcclxuICAgIH0pLFxyXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICByZWFkb25seTogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBhdXRvZm9jdXM6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxyXG4gICAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcclxuICAgIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRleHRhcmVhV2lkZ2V0O1xyXG4iXX0=