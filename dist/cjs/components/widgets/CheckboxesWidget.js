"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function selectValue(value, selected, all) {
  var at = all.indexOf(value);
  var updated = selected.slice(0, at).concat(value, selected.slice(at)); // As inserting values at predefined index positions doesn't work with empty
  // arrays, we need to reorder the updated selection to match the initial order

  return updated.sort(function (a, b) {
    return all.indexOf(a) > all.indexOf(b);
  });
}

function deselectValue(value, selected) {
  return selected.filter(function (v) {
    return v !== value;
  });
}

function CheckboxesWidget(props) {
  var id = props.id,
      disabled = props.disabled,
      options = props.options,
      value = props.value,
      autofocus = props.autofocus,
      readonly = props.readonly,
      _onChange = props.onChange;
  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled,
      inline = options.inline;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "checkboxes",
    id: id
  }, enumOptions.map(function (option, index) {
    var checked = value.indexOf(option.value) !== -1;
    var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) != -1;
    var disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";

    var checkbox = /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement("input", {
      type: "checkbox",
      id: "".concat(id, "_").concat(index),
      checked: checked,
      disabled: disabled || itemDisabled || readonly,
      autoFocus: autofocus && index === 0,
      onChange: function onChange(event) {
        var all = enumOptions.map(function (_ref) {
          var value = _ref.value;
          return value;
        });

        if (event.target.checked) {
          _onChange(selectValue(option.value, value, all));
        } else {
          _onChange(deselectValue(option.value, value));
        }
      }
    }), /*#__PURE__*/_react.default.createElement("span", null, option.label));

    return inline ? /*#__PURE__*/_react.default.createElement("label", {
      key: index,
      className: "checkbox-inline ".concat(disabledCls)
    }, checkbox) : /*#__PURE__*/_react.default.createElement("div", {
      key: index,
      className: "checkbox ".concat(disabledCls)
    }, /*#__PURE__*/_react.default.createElement("label", null, checkbox));
  }));
}

CheckboxesWidget.defaultProps = {
  autofocus: false,
  options: {
    inline: false
  }
};

if (process.env.NODE_ENV !== "production") {
  CheckboxesWidget.propTypes = {
    schema: _propTypes.default.object.isRequired,
    id: _propTypes.default.string.isRequired,
    options: _propTypes.default.shape({
      enumOptions: _propTypes.default.array,
      inline: _propTypes.default.bool
    }).isRequired,
    value: _propTypes.default.any,
    required: _propTypes.default.bool,
    readonly: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    multiple: _propTypes.default.bool,
    autofocus: _propTypes.default.bool,
    onChange: _propTypes.default.func
  };
}

var _default = CheckboxesWidget;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3dpZGdldHMvQ2hlY2tib3hlc1dpZGdldC5qcyJdLCJuYW1lcyI6WyJzZWxlY3RWYWx1ZSIsInZhbHVlIiwic2VsZWN0ZWQiLCJhbGwiLCJhdCIsImluZGV4T2YiLCJ1cGRhdGVkIiwic2xpY2UiLCJjb25jYXQiLCJzb3J0IiwiYSIsImIiLCJkZXNlbGVjdFZhbHVlIiwiZmlsdGVyIiwidiIsIkNoZWNrYm94ZXNXaWRnZXQiLCJwcm9wcyIsImlkIiwiZGlzYWJsZWQiLCJvcHRpb25zIiwiYXV0b2ZvY3VzIiwicmVhZG9ubHkiLCJvbkNoYW5nZSIsImVudW1PcHRpb25zIiwiZW51bURpc2FibGVkIiwiaW5saW5lIiwibWFwIiwib3B0aW9uIiwiaW5kZXgiLCJjaGVja2VkIiwiaXRlbURpc2FibGVkIiwiZGlzYWJsZWRDbHMiLCJjaGVja2JveCIsImV2ZW50IiwidGFyZ2V0IiwibGFiZWwiLCJkZWZhdWx0UHJvcHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcm9wVHlwZXMiLCJzY2hlbWEiLCJQcm9wVHlwZXMiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwic2hhcGUiLCJhcnJheSIsImJvb2wiLCJhbnkiLCJyZXF1aXJlZCIsIm11bHRpcGxlIiwiZnVuYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsU0FBU0EsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEJDLFFBQTVCLEVBQXNDQyxHQUF0QyxFQUEyQztBQUN6QyxNQUFNQyxFQUFFLEdBQUdELEdBQUcsQ0FBQ0UsT0FBSixDQUFZSixLQUFaLENBQVg7QUFDQSxNQUFNSyxPQUFPLEdBQUdKLFFBQVEsQ0FBQ0ssS0FBVCxDQUFlLENBQWYsRUFBa0JILEVBQWxCLEVBQXNCSSxNQUF0QixDQUE2QlAsS0FBN0IsRUFBb0NDLFFBQVEsQ0FBQ0ssS0FBVCxDQUFlSCxFQUFmLENBQXBDLENBQWhCLENBRnlDLENBR3pDO0FB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QixJQUFBQSxRQUFRLEVBQUVvQixtQkFBVVU7QUFiTyxHQUE3QjtBQWVEOztlQUVjckMsZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcclxuXHJcbmZ1bmN0aW9uIHNlbGVjdFZhbHVlKHZhbHVlLCBzZWxlY3RlZCwgYWxsKSB7XHJcbiAgY29uc3QgYXQgPSBhbGwuaW5kZXhPZih2YWx1ZSk7XHJcbiAgY29uc3QgdXBkYXRlZCA9IHNlbGVjdGVkLnNsaWNlKDAsIGF0KS5jb25jYXQodmFsdWUsIHNlbGVjdGVkLnNsaWNlKGF0KSk7XHJcbiAgLy8gQXMgaW5zZXJ0aW5nIHZhbHVlcyBhdCBwcmVkZWZpbmVkIGluZGV4IHBvc2l0aW9ucyBkb2Vzbid0IHdvcmsgd2l0aCBlbXB0eVxyXG4gIC8vIGFycmF5cywgd2UgbmVlZCB0byByZW9yZGVyIHRoZSB1cGRhdGVkIHNlbGVjdGlvbiB0byBtYXRjaCB0aGUgaW5pdGlhbCBvcmRlclxyXG4gIHJldHVybiB1cGRhdGVkLnNvcnQoKGEsIGIpID0+IGFsbC5pbmRleE9mKGEpID4gYWxsLmluZGV4T2YoYikpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZXNlbGVjdFZhbHVlKHZhbHVlLCBzZWxlY3RlZCkge1xyXG4gIHJldHVybiBzZWxlY3RlZC5maWx0ZXIodiA9PiB2ICE9PSB2YWx1ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIENoZWNrYm94ZXNXaWRnZXQocHJvcHMpIHtcclxuICBjb25zdCB7IGlkLCBkaXNhYmxlZCwgb3B0aW9ucywgdmFsdWUsIGF1dG9mb2N1cywgcmVhZG9ubHksIG9uQ2hhbmdlIH0gPSBwcm9wcztcclxuICBjb25zdCB7IGVudW1PcHRpb25zLCBlbnVtRGlzYWJsZWQsIGlubGluZSB9ID0gb3B0aW9ucztcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjaGVja2JveGVzXCIgaWQ9e2lkfT5cclxuICAgICAge2VudW1PcHRpb25zLm1hcCgob3B0aW9uLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNoZWNrZWQgPSB2YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgIT09IC0xO1xyXG4gICAgICAgIGNvbnN0IGl0ZW1EaXNhYmxlZCA9XHJcbiAgICAgICAgICBlbnVtRGlzYWJsZWQgJiYgZW51bURpc2FibGVkLmluZGV4T2Yob3B0aW9uLnZhbHVlKSAhPSAtMTtcclxuICAgICAgICBjb25zdCBkaXNhYmxlZENscyA9XHJcbiAgICAgICAgICBkaXNhYmxlZCB8fCBpdGVtRGlzYWJsZWQgfHwgcmVhZG9ubHkgPyBcImRpc2FibGVkXCIgOiBcIlwiO1xyXG4gICAgICAgIGNvbnN0IGNoZWNrYm94ID0gKFxyXG4gICAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICAgICAgICAgaWQ9e2Ake2lkfV8ke2luZGV4fWB9XHJcbiAgICAgICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cclxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWQgfHwgaXRlbURpc2FibGVkIHx8IHJlYWRvbmx5fVxyXG4gICAgICAgICAgICAgIGF1dG9Gb2N1cz17YXV0b2ZvY3VzICYmIGluZGV4ID09PSAwfVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbGwgPSBlbnVtT3B0aW9ucy5tYXAoKHsgdmFsdWUgfSkgPT4gdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlKHNlbGVjdFZhbHVlKG9wdGlvbi52YWx1ZSwgdmFsdWUsIGFsbCkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2UoZGVzZWxlY3RWYWx1ZShvcHRpb24udmFsdWUsIHZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPHNwYW4+e29wdGlvbi5sYWJlbH08L3NwYW4+XHJcbiAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gaW5saW5lID8gKFxyXG4gICAgICAgICAgPGxhYmVsIGtleT17aW5kZXh9IGNsYXNzTmFtZT17YGNoZWNrYm94LWlubGluZSAke2Rpc2FibGVkQ2xzfWB9PlxyXG4gICAgICAgICAgICB7Y2hlY2tib3h9XHJcbiAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICkgOiAoXHJcbiAgICAgICAgICA8ZGl2IGtleT17aW5kZXh9IGNsYXNzTmFtZT17YGNoZWNrYm94ICR7ZGlzYWJsZWRDbHN9YH0+XHJcbiAgICAgICAgICAgIDxsYWJlbD57Y2hlY2tib3h9PC9sYWJlbD5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pfVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG5cclxuQ2hlY2tib3hlc1dpZGdldC5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgYXV0b2ZvY3VzOiBmYWxzZSxcclxuICBvcHRpb25zOiB7XHJcbiAgICBpbmxpbmU6IGZhbHNlLFxyXG4gIH0sXHJcbn07XHJcblxyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgQ2hlY2tib3hlc1dpZGdldC5wcm9wVHlwZXMgPSB7XHJcbiAgICBzY2hlbWE6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgICBvcHRpb25zOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG4gICAgICBlbnVtT3B0aW9uczogUHJvcFR5cGVzLmFycmF5LFxyXG4gICAgICBpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgfSkuaXNSZXF1aXJlZCxcclxuICAgIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxyXG4gICAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgcmVhZG9ubHk6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgYXV0b2ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcclxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDaGVja2JveGVzV2lkZ2V0O1xyXG4iXX0=