import React from "react";
import PropTypes from "prop-types";

function TextareaWidget(props) {
  var id = props.id,
      options = props.options,
      placeholder = props.placeholder,
      value = props.value,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus;

  var _onChange = function _onChange(_ref) {
    var value = _ref.target.value;
    return onChange(value === "" ? options.emptyValue : value);
  };

  return /*#__PURE__*/React.createElement("textarea", {
    id: id,
    className: "form-control",
    value: value ? value : "",
    placeholder: placeholder,
    required: required,
    disabled: disabled,
    readOnly: readonly,
    autoFocus: autofocus,
    rows: options.rows,
    onBlur: onBlur && function (event) {
      return onBlur(id, event.target.value);
    },
    onFocus: onFocus && function (event) {
      return onFocus(id, event.target.value);
    },
    onChange: _onChange
  });
}

TextareaWidget.defaultProps = {
  autofocus: false,
  options: {}
};

if (process.env.NODE_ENV !== "production") {
  TextareaWidget.propTypes = {
    schema: PropTypes.object.isRequired,
    id: PropTypes.string.isRequired,
    placeholder: PropTypes.string,
    options: PropTypes.shape({
      rows: PropTypes.number
    }),
    value: PropTypes.string,
    required: PropTypes.bool,
    disabled: PropTypes.bool,
    readonly: PropTypes.bool,
    autofocus: PropTypes.bool,
    onChange: PropTypes.func,
    onBlur: PropTypes.func,
    onFocus: PropTypes.func
  };
}

export default TextareaWidget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3dpZGdldHMvVGV4dGFyZWFXaWRnZXQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQcm9wVHlwZXMiLCJUZXh0YXJlYVdpZGdldCIsInByb3BzIiwiaWQiLCJvcHRpb25zIiwicGxhY2Vob2xkZXIiLCJ2YWx1ZSIsInJlcXVpcmVkIiwiZGlzYWJsZWQiLCJyZWFkb25seSIsImF1dG9mb2N1cyIsIm9uQ2hhbmdlIiwib25CbHVyIiwib25Gb2N1cyIsIl9vbkNoYW5nZSIsInRhcmdldCIsImVtcHR5VmFsdWUiLCJyb3dzIiwiZXZlbnQiLCJkZWZhdWx0UHJvcHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcm9wVHlwZXMiLCJzY2hlbWEiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwic2hhcGUiLCJudW1iZXIiLCJib29sIiwiZnVuYyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7O0FBRUEsU0FBU0MsY0FBVCxDQUF3QkMsS0FBeEIsRUFBK0I7QUFDN0IsTUFDRUMsRUFERixHQVlJRCxLQVpKLENBQ0VDLEVBREY7QUFBQSxNQUVFQyxPQUZGLEdBWUlGLEtBWkosQ0FFRUUsT0FGRjtBQUFBLE1BR0VDLFdBSEYsR0FZSUgsS0FaSixDQUdFRyxXQUhGO0FBQUEsTUFJRUMsS0FKRixHQVlJSixLQVpKLENBSUVJLEtBSkY7QUFBQSxNQUtFQyxRQUxGLEdBWUlMLEtBWkosQ0FLRUssUUFMRjtBQUFBLE1BTUVDLFFBTkYsR0FZSU4sS0FaSixDQU1FTSxRQU5GO0FBQUEsTUFPRUMsUUFQRixHQVlJUCxLQVpKLENBT0VPLFFBUEY7QUFBQSxNQVFFQyxTQVJGLEdBWUlSLEtBWkosQ0FRRVEsU0FSRjtBQUFBLE1BU0VDLFFBVEYsR0FZSVQsS0FaSixDQVNFUyxRQVRGO0FBQUEsTUFVRUMsTUFWRixHQVlJVixLQVpKLENBVUVVLE1BVkY7QUFBQSxNQVdFQyxPQVhGLEdBWUlYLEtBWkosQ0FXRVcsT0FYRjs7QUFhQSxNQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxPQUEyQjtBQUFBLFFBQWRSLEtBQWMsUUFBeEJTLE1BQXdCLENBQWRULEtBQWM7QUFDM0MsV0FBT0ssUUFBUSxDQUFDTCxLQUFLLEtBQUssRUFBVixHQUFlRixPQUFPLENBQUNZLFVBQXZCLEdBQW9DVixLQUFyQyxDQUFmO0FBQ0QsR0FGRDs7QUFHQSxzQkFDRTtBQUNFLElBQUEsRUFBRSxFQUFFSCxFQUROO0FBRUUsSUFBQSxTQUFTLEVBQUMsY0FGWjtBQUdFLElBQUEsS0FBSyxFQUFFRyxLQUFLLEdBQUdBLEtBQUgsR0FBVyxFQUh6QjtBQUlFLElBQUEsV0FBVyxFQUFFRCxXQUpmO0FBS0UsSUFBQSxRQUFRLEVBQUVFLFFBTFo7QUFNRSxJQUFBLFFBQVEsRUFBRUMsUUFOWjtBQU9FLElBQUEsUUFBUSxFQUFFQyxRQVBaO0FBUUUsSUFBQSxTQUFTLEVBQUVDLFNBUmI7QUFTRSxJQUFBLElBQUksRUFBRU4sT0FBTyxDQUFDYSxJQVRoQjtBQVVFLElBQUEsTUFBTSxFQUFFTCxNQUFNLElBQUssVUFBQU0sS0FBSztBQUFBLGFBQUlOLE1BQU0sQ0FBQ1QsRUFBRCxFQUFLZSxLQUFLLENBQUNILE1BQU4sQ0FBYVQsS0FBbEIsQ0FBVjtBQUFBLEtBVjFCO0FBV0UsSUFBQSxPQUFPLEVBQUVPLE9BQU8sSUFBSyxVQUFBSyxLQUFLO0FBQUEsYUFBSUwsT0FBTyxDQUFDVixFQUFELEVBQUtlLEtBQUssQ0FBQ0gsTUFBTixDQUFhVCxLQUFsQixDQUFYO0FBQUEsS0FYNUI7QUFZRSxJQUFBLFFBQVEsRUFBRVE7QUFaWixJQURGO0FBZ0JEOztBQUVEYixjQUFjLENBQUNrQixZQUFmLEdBQThCO0FBQzVCVCxFQUFBQSxTQUFTLEVBQUUsS0FEaUI7QUFFNUJOLEVBQUFBLE9BQU8sRUFBRTtBQUZtQixDQUE5Qjs7QUFLQSxJQUFJZ0IsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsWUFBN0IsRUFBMkM7QUFDekNyQixFQUFBQSxjQUFjLENBQUNzQixTQUFmLEdBQTJCO0FBQ3pCQyxJQUFBQSxNQUFNLEVBQUV4QixTQUFTLENBQUN5QixNQUFWLENBQWlCQyxVQURBO0FBRXpCdkIsSUFBQUEsRUFBRSxFQUFFSCxTQUFTLENBQUMyQixNQUFWLENBQWlCRCxVQUZJO0FBR3pCckIsSUFBQUEsV0FBVyxFQUFFTCxTQUFTLENBQUMyQixNQUhFO0FBSXpCdkIsSUFBQUEsT0FBTyxFQUFFSixTQUFTLENBQUM0QixLQUFWLENBQWdCO0FBQ3ZCWCxNQUFBQSxJQUFJLEVBQUVqQixTQUFTLENBQUM2QjtBQURPLEtBQWhCLENBSmdCO0FBT3pCdkIsSUFBQUEsS0FBSyxFQUFFTixTQUFTLENBQUMyQixNQVBRO0FBUXpCcEIsSUFBQUEsUUFBUSxFQUFFUCxTQUFTLENBQUM4QixJQVJLO0FBU3pCdEIsSUFBQUEsUUFBUSxFQUFFUixTQUFTLENBQUM4QixJQVRLO0FBVXpCckIsSUFBQUEsUUFBUSxFQUFFVCxTQUFTLENBQUM4QixJQVZLO0FBV3pCcEIsSUFBQUEsU0FBUyxFQUFFVixTQUFTLENBQUM4QixJQVhJO0FBWXpCbkIsSUFBQUEsUUFBUSxFQUFFWCxTQUFTLENBQUMrQixJQVpLO0FBYXpCbkIsSUFBQUEsTUFBTSxFQUFFWixTQUFTLENBQUMrQixJQWJPO0FBY3pCbEIsSUFBQUEsT0FBTyxFQUFFYixTQUFTLENBQUMrQjtBQWRNLEdBQTNCO0FBZ0JEOztBQUVELGVBQWU5QixjQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XHJcblxyXG5mdW5jdGlvbiBUZXh0YXJlYVdpZGdldChwcm9wcykge1xyXG4gIGNvbnN0IHtcclxuICAgIGlkLFxyXG4gICAgb3B0aW9ucyxcclxuICAgIHBsYWNlaG9sZGVyLFxyXG4gICAgdmFsdWUsXHJcbiAgICByZXF1aXJlZCxcclxuICAgIGRpc2FibGVkLFxyXG4gICAgcmVhZG9ubHksXHJcbiAgICBhdXRvZm9jdXMsXHJcbiAgICBvbkNoYW5nZSxcclxuICAgIG9uQmx1cixcclxuICAgIG9uRm9jdXMsXHJcbiAgfSA9IHByb3BzO1xyXG4gIGNvbnN0IF9vbkNoYW5nZSA9ICh7IHRhcmdldDogeyB2YWx1ZSB9IH0pID0+IHtcclxuICAgIHJldHVybiBvbkNoYW5nZSh2YWx1ZSA9PT0gXCJcIiA/IG9wdGlvbnMuZW1wdHlWYWx1ZSA6IHZhbHVlKTtcclxuICB9O1xyXG4gIHJldHVybiAoXHJcbiAgICA8dGV4dGFyZWFcclxuICAgICAgaWQ9e2lkfVxyXG4gICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxyXG4gICAgICB2YWx1ZT17dmFsdWUgPyB2YWx1ZSA6IFwiXCJ9XHJcbiAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cclxuICAgICAgcmVxdWlyZWQ9e3JlcXVpcmVkfVxyXG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XHJcbiAgICAgIHJlYWRPbmx5PXtyZWFkb25seX1cclxuICAgICAgYXV0b0ZvY3VzPXthdXRvZm9jdXN9XHJcbiAgICAgIHJvd3M9e29wdGlvbnMucm93c31cclxuICAgICAgb25CbHVyPXtvbkJsdXIgJiYgKGV2ZW50ID0+IG9uQmx1cihpZCwgZXZlbnQudGFyZ2V0LnZhbHVlKSl9XHJcbiAgICAgIG9uRm9jdXM9e29uRm9jdXMgJiYgKGV2ZW50ID0+IG9uRm9jdXMoaWQsIGV2ZW50LnRhcmdldC52YWx1ZSkpfVxyXG4gICAgICBvbkNoYW5nZT17X29uQ2hhbmdlfVxyXG4gICAgLz5cclxuICApO1xyXG59XHJcblxyXG5UZXh0YXJlYVdpZGdldC5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgYXV0b2ZvY3VzOiBmYWxzZSxcclxuICBvcHRpb25zOiB7fSxcclxufTtcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICBUZXh0YXJlYVdpZGdldC5wcm9wVHlwZXMgPSB7XHJcbiAgICBzY2hlbWE6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcclxuICAgIG9wdGlvbnM6IFByb3BUeXBlcy5zaGFwZSh7XHJcbiAgICAgIHJvd3M6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgICB9KSxcclxuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgcmVhZG9ubHk6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgYXV0b2ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcclxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcclxuICAgIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXh0YXJlYVdpZGdldDtcclxuIl19