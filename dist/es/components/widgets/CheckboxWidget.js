import React from "react";
import PropTypes from "prop-types";
import { schemaRequiresTrueValue } from "../../utils";

function CheckboxWidget(props) {
  var schema = props.schema,
      id = props.id,
      value = props.value,
      disabled = props.disabled,
      readonly = props.readonly,
      label = props.label,
      autofocus = props.autofocus,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      _onChange = props.onChange,
      DescriptionField = props.DescriptionField; // Because an unchecked checkbox will cause html5 validation to fail, only add
  // the "required" attribute if the field value must be "true", due to the
  // "const" or "enum" keywords

  var required = schemaRequiresTrueValue(schema);
  return /*#__PURE__*/React.createElement("div", {
    className: "checkbox ".concat(disabled || readonly ? "disabled" : "")
  }, schema.description && /*#__PURE__*/React.createElement(DescriptionField, {
    description: schema.description
  }), /*#__PURE__*/React.createElement("label", null, /*#__PURE__*/React.createElement("input", {
    type: "checkbox",
    id: id,
    checked: typeof value === "undefined" ? false : value,
    required: required,
    disabled: disabled || readonly,
    autoFocus: autofocus,
    onChange: function onChange(event) {
      return _onChange(event.target.checked);
    },
    onBlur: onBlur && function (event) {
      return onBlur(id, event.target.checked);
    },
    onFocus: onFocus && function (event) {
      return onFocus(id, event.target.checked);
    }
  }), /*#__PURE__*/React.createElement("span", null, label)));
}

CheckboxWidget.defaultProps = {
  autofocus: false
};

if (process.env.NODE_ENV !== "production") {
  CheckboxWidget.propTypes = {
    schema: PropTypes.object.isRequired,
    id: PropTypes.string.isRequired,
    value: PropTypes.bool,
    required: PropTypes.bool,
    disabled: PropTypes.bool,
    readonly: PropTypes.bool,
    autofocus: PropTypes.bool,
    onChange: PropTypes.func
  };
}

export default CheckboxWidget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3dpZGdldHMvQ2hlY2tib3hXaWRnZXQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQcm9wVHlwZXMiLCJzY2hlbWFSZXF1aXJlc1RydWVWYWx1ZSIsIkNoZWNrYm94V2lkZ2V0IiwicHJvcHMiLCJzY2hlbWEiLCJpZCIsInZhbHVlIiwiZGlzYWJsZWQiLCJyZWFkb25seSIsImxhYmVsIiwiYXV0b2ZvY3VzIiwib25CbHVyIiwib25Gb2N1cyIsIm9uQ2hhbmdlIiwiRGVzY3JpcHRpb25GaWVsZCIsInJlcXVpcmVkIiwiZGVzY3JpcHRpb24iLCJldmVudCIsInRhcmdldCIsImNoZWNrZWQiLCJkZWZhdWx0UHJvcHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcm9wVHlwZXMiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwiYm9vbCIsImZ1bmMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsU0FBU0MsdUJBQVQsUUFBd0MsYUFBeEM7O0FBRUEsU0FBU0MsY0FBVCxDQUF3QkMsS0FBeEIsRUFBK0I7QUFDN0IsTUFDRUMsTUFERixHQVlJRCxLQVpKLENBQ0VDLE1BREY7QUFBQSxNQUVFQyxFQUZGLEdBWUlGLEtBWkosQ0FFRUUsRUFGRjtBQUFBLE1BR0VDLEtBSEYsR0FZSUgsS0FaSixDQUdFRyxLQUhGO0FBQUEsTUFJRUMsUUFKRixHQVlJSixLQVpKLENBSUVJLFFBSkY7QUFBQSxNQUtFQyxRQUxGLEdBWUlMLEtBWkosQ0FLRUssUUFMRjtBQUFBLE1BTUVDLEtBTkYsR0FZSU4sS0FaSixDQU1FTSxLQU5GO0FBQUEsTUFPRUMsU0FQRixHQVlJUCxLQVpKLENBT0VPLFNBUEY7QUFBQSxNQVFFQyxNQVJGLEdBWUlSLEtBWkosQ0FRRVEsTUFSRjtBQUFBLE1BU0VDLE9BVEYsR0FZSVQsS0FaSixDQVNFUyxPQVRGO0FBQUEsTUFVRUMsU0FWRixHQVlJVixLQVpKLENBVUVVLFFBVkY7QUFBQSxNQVdFQyxnQkFYRixHQVlJWCxLQVpKLENBV0VXLGdCQVhGLENBRDZCLENBZTdCO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQyxRQUFRLEdBQUdkLHVCQUF1QixDQUFDRyxNQUFELENBQXhDO0FBRUEsc0JBQ0U7QUFBSyxJQUFBLFNBQVMscUJBQWNHLFFBQVEsSUFBSUMsUUFBWixHQUF1QixVQUF2QixHQUFvQyxFQUFsRDtBQUFkLEtBQ0dKLE1BQU0sQ0FBQ1ksV0FBUCxpQkFDQyxvQkFBQyxnQkFBRDtBQUFrQixJQUFBLFdBQVcsRUFBRVosTUFBTSxDQUFDWTtBQUF0QyxJQUZKLGVBSUUsZ0RBQ0U7QUFDRSxJQUFBLElBQUksRUFBQyxVQURQO0FBRUUsSUFBQSxFQUFFLEVBQUVYLEVBRk47QUFHRSxJQUFBLE9BQU8sRUFBRSxPQUFPQyxLQUFQLEtBQWlCLFdBQWpCLEdBQStCLEtBQS9CLEdBQXVDQSxLQUhsRDtBQUlFLElBQUEsUUFBUSxFQUFFUyxRQUpaO0FBS0UsSUFBQSxRQUFRLEVBQUVSLFFBQVEsSUFBSUMsUUFMeEI7QUFNRSxJQUFBLFNBQVMsRUFBRUUsU0FOYjtBQU9FLElBQUEsUUFBUSxFQUFFLGtCQUFBTyxLQUFLO0FBQUEsYUFBSUosU0FBUSxDQUFDSSxLQUFLLENBQUNDLE1BQU4sQ0FBYUMsT0FBZCxDQUFaO0FBQUEsS0FQakI7QUFRRSxJQUFBLE1BQU0sRUFBRVIsTUFBTSxJQUFLLFVBQUFNLEtBQUs7QUFBQSxhQUFJTixNQUFNLENBQUNOLEVBQUQsRUFBS1ksS0FBSyxDQUFDQyxNQUFOLENBQWFDLE9BQWxCLENBQVY7QUFBQSxLQVIxQjtBQVNFLElBQUEsT0FBTyxFQUFFUCxPQUFPLElBQUssVUFBQUssS0FBSztBQUFBLGFBQUlMLE9BQU8sQ0FBQ1AsRUFBRCxFQUFLWSxLQUFLLENBQUNDLE1BQU4sQ0FBYUMsT0FBbEIsQ0FBWDtBQUFBO0FBVDVCLElBREYsZUFZRSxrQ0FBT1YsS0FBUCxDQVpGLENBSkYsQ0FERjtBQXFCRDs7QUFFRFAsY0FBYyxDQUFDa0IsWUFBZixHQUE4QjtBQUM1QlYsRUFBQUEsU0FBUyxFQUFFO0FBRGlCLENBQTlCOztBQUlBLElBQUlXLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQTdCLEVBQTJDO0FBQ3pDckIsRUFBQUEsY0FBYyxDQUFDc0IsU0FBZixHQUEyQjtBQUN6QnBCLElBQUFBLE1BQU0sRUFBRUosU0FBUyxDQUFDeUIsTUFBVixDQUFpQkMsVUFEQTtBQUV6QnJCLElBQUFBLEVBQUUsRUFBRUwsU0FBUyxDQUFDMkIsTUFBVixDQUFpQkQsVUFGSTtBQUd6QnBCLElBQUFBLEtBQUssRUFBRU4sU0FBUyxDQUFDNEIsSUFIUTtBQUl6QmIsSUFBQUEsUUFBUSxFQUFFZixTQUFTLENBQUM0QixJQUpLO0FBS3pCckIsSUFBQUEsUUFBUSxFQUFFUCxTQUFTLENBQUM0QixJQUxLO0FBTXpCcEIsSUFBQUEsUUFBUSxFQUFFUixTQUFTLENBQUM0QixJQU5LO0FBT3pCbEIsSUFBQUEsU0FBUyxFQUFFVixTQUFTLENBQUM0QixJQVBJO0FBUXpCZixJQUFBQSxRQUFRLEVBQUViLFNBQVMsQ0FBQzZCO0FBUkssR0FBM0I7QUFVRDs7QUFFRCxlQUFlM0IsY0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5pbXBvcnQgeyBzY2hlbWFSZXF1aXJlc1RydWVWYWx1ZSB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xyXG5cclxuZnVuY3Rpb24gQ2hlY2tib3hXaWRnZXQocHJvcHMpIHtcclxuICBjb25zdCB7XHJcbiAgICBzY2hlbWEsXHJcbiAgICBpZCxcclxuICAgIHZhbHVlLFxyXG4gICAgZGlzYWJsZWQsXHJcbiAgICByZWFkb25seSxcclxuICAgIGxhYmVsLFxyXG4gICAgYXV0b2ZvY3VzLFxyXG4gICAgb25CbHVyLFxyXG4gICAgb25Gb2N1cyxcclxuICAgIG9uQ2hhbmdlLFxyXG4gICAgRGVzY3JpcHRpb25GaWVsZCxcclxuICB9ID0gcHJvcHM7XHJcblxyXG4gIC8vIEJlY2F1c2UgYW4gdW5jaGVja2VkIGNoZWNrYm94IHdpbGwgY2F1c2UgaHRtbDUgdmFsaWRhdGlvbiB0byBmYWlsLCBvbmx5IGFkZFxyXG4gIC8vIHRoZSBcInJlcXVpcmVkXCIgYXR0cmlidXRlIGlmIHRoZSBmaWVsZCB2YWx1ZSBtdXN0IGJlIFwidHJ1ZVwiLCBkdWUgdG8gdGhlXHJcbiAgLy8gXCJjb25zdFwiIG9yIFwiZW51bVwiIGtleXdvcmRzXHJcbiAgY29uc3QgcmVxdWlyZWQgPSBzY2hlbWFSZXF1aXJlc1RydWVWYWx1ZShzY2hlbWEpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2BjaGVja2JveCAke2Rpc2FibGVkIHx8IHJlYWRvbmx5ID8gXCJkaXNhYmxlZFwiIDogXCJcIn1gfT5cclxuICAgICAge3NjaGVtYS5kZXNjcmlwdGlvbiAmJiAoXHJcbiAgICAgICAgPERlc2NyaXB0aW9uRmllbGQgZGVzY3JpcHRpb249e3NjaGVtYS5kZXNjcmlwdGlvbn0gLz5cclxuICAgICAgKX1cclxuICAgICAgPGxhYmVsPlxyXG4gICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcclxuICAgICAgICAgIGlkPXtpZH1cclxuICAgICAgICAgIGNoZWNrZWQ9e3R5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IGZhbHNlIDogdmFsdWV9XHJcbiAgICAgICAgICByZXF1aXJlZD17cmVxdWlyZWR9XHJcbiAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWQgfHwgcmVhZG9ubHl9XHJcbiAgICAgICAgICBhdXRvRm9jdXM9e2F1dG9mb2N1c31cclxuICAgICAgICAgIG9uQ2hhbmdlPXtldmVudCA9PiBvbkNoYW5nZShldmVudC50YXJnZXQuY2hlY2tlZCl9XHJcbiAgICAgICAgICBvbkJsdXI9e29uQmx1ciAmJiAoZXZlbnQgPT4gb25CbHVyKGlkLCBldmVudC50YXJnZXQuY2hlY2tlZCkpfVxyXG4gICAgICAgICAgb25Gb2N1cz17b25Gb2N1cyAmJiAoZXZlbnQgPT4gb25Gb2N1cyhpZCwgZXZlbnQudGFyZ2V0LmNoZWNrZWQpKX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxzcGFuPntsYWJlbH08L3NwYW4+XHJcbiAgICAgIDwvbGFiZWw+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcblxyXG5DaGVja2JveFdpZGdldC5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgYXV0b2ZvY3VzOiBmYWxzZSxcclxufTtcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICBDaGVja2JveFdpZGdldC5wcm9wVHlwZXMgPSB7XHJcbiAgICBzY2hlbWE6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgICB2YWx1ZTogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICByZWFkb25seTogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBhdXRvZm9jdXM6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENoZWNrYm94V2lkZ2V0O1xyXG4iXX0=