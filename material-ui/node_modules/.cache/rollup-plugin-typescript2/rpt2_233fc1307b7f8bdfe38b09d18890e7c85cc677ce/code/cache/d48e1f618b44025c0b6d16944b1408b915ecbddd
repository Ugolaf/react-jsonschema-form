{"code":"import React from \"react\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { utils } from \"@rjsf/core\";\r\nconst { asNumber, guessType } = utils;\r\nconst nums = new Set([\"number\", \"integer\"]);\r\n/**\r\n * This is a silly limitation in the DOM where option change event values are\r\n * always retrieved as strings.\r\n */\r\nconst processValue = (schema, value) => {\r\n    // \"enum\" is a reserved word, so only \"type\" and \"items\" can be destructured\r\n    const { type, items } = schema;\r\n    if (value === \"\") {\r\n        return undefined;\r\n    }\r\n    else if (type === \"array\" && items && nums.has(items.type)) {\r\n        return value.map(asNumber);\r\n    }\r\n    else if (type === \"boolean\") {\r\n        return value === \"true\";\r\n    }\r\n    else if (type === \"number\") {\r\n        return asNumber(value);\r\n    }\r\n    // If type is undefined, but an enum is present, try and infer the type from\r\n    // the enum values\r\n    if (schema.enum) {\r\n        if (schema.enum.every((x) => guessType(x) === \"number\")) {\r\n            return asNumber(value);\r\n        }\r\n        else if (schema.enum.every((x) => guessType(x) === \"boolean\")) {\r\n            return value === \"true\";\r\n        }\r\n    }\r\n    return value;\r\n};\r\nconst SelectWidget = ({ schema, id, options, label, required, disabled, readonly, value, multiple, autofocus, onChange, onBlur, onFocus, rawErrors = [], }) => {\r\n    const { enumOptions, enumDisabled } = options;\r\n    const emptyValue = multiple ? [] : \"\";\r\n    const _onChange = ({ target: { value }, }) => onChange(processValue(schema, value));\r\n    const _onBlur = ({ target: { value } }) => onBlur(id, processValue(schema, value));\r\n    const _onFocus = ({ target: { value }, }) => onFocus(id, processValue(schema, value));\r\n    return (React.createElement(TextField, { id: id, label: label || schema.title, select: true, value: typeof value === \"undefined\" ? emptyValue : value, required: required, disabled: disabled || readonly, autoFocus: autofocus, error: rawErrors.length > 0, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, InputLabelProps: {\r\n            shrink: true,\r\n        }, SelectProps: {\r\n            multiple: typeof multiple === \"undefined\" ? false : multiple,\r\n        } }, enumOptions.map(({ value, label }, i) => {\r\n        const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\r\n        return (React.createElement(MenuItem, { key: i, value: value, disabled: disabled }, label));\r\n    })));\r\n};\r\nexport default SelectWidget;\r\n//# sourceMappingURL=SelectWidget.js.map","references":["C:/dev/react-jsonschema-form/packages/material-ui/node_modules/@types/react/index.d.ts","C:/dev/react-jsonschema-form/packages/material-ui/node_modules/@material-ui/core/MenuItem/index.d.ts","C:/dev/react-jsonschema-form/packages/material-ui/node_modules/@material-ui/core/TextField/index.d.ts","C:/dev/react-jsonschema-form/packages/material-ui/node_modules/@rjsf/core/index.d.ts","C:/dev/react-jsonschema-form/packages/material-ui/node_modules/@rjsf/core/index.d.ts"],"map":"{\"version\":3,\"file\":\"SelectWidget.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/SelectWidget/SelectWidget.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"C:/dev/react-jsonschema-form/packages/material-ui/SelectWidget/SelectWidget.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport { WidgetProps } from \"@rjsf/core\";\r\ndeclare const SelectWidget: ({ schema, id, options, label, required, disabled, readonly, value, multiple, autofocus, onChange, onBlur, onFocus, rawErrors, }: WidgetProps) => JSX.Element;\r\nexport default SelectWidget;\r\n"}}
