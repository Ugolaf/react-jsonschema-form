{"code":"import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { utils } from \"@rjsf/core\";\r\nconst { getDisplayLabel } = utils;\r\nconst TextWidget = ({ id, placeholder, required, readonly, disabled, type, label, value, onChange, onBlur, onFocus, autofocus, options, schema, uiSchema, rawErrors = [], formContext, registry, // pull out the registry so it doesn't end up in the textFieldProps\r\n...textFieldProps }) => {\r\n    const _onChange = ({ target: { value }, }) => onChange(value === \"\" ? options.emptyValue : value);\r\n    const _onBlur = ({ target: { value } }) => onBlur(id, value);\r\n    const _onFocus = ({ target: { value }, }) => onFocus(id, value);\r\n    const displayLabel = getDisplayLabel(schema, uiSchema\r\n    /* TODO: , rootSchema */\r\n    );\r\n    const inputType = (type || schema.type) === 'string' ? 'text' : `${type || schema.type}`;\r\n    return (React.createElement(TextField, Object.assign({ id: id, placeholder: placeholder, label: displayLabel ? label || schema.title : false, autoFocus: autofocus, required: required, disabled: disabled || readonly, type: inputType, value: value || value === 0 ? value : \"\", error: rawErrors.length > 0, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus }, textFieldProps)));\r\n};\r\nexport default TextWidget;\r\n//# sourceMappingURL=TextWidget.js.map","references":["C:/dev/react-jsonschema-form/packages/material-ui/node_modules/@types/react/index.d.ts","C:/dev/react-jsonschema-form/packages/material-ui/node_modules/@material-ui/core/TextField/index.d.ts","C:/dev/react-jsonschema-form/packages/material-ui/node_modules/@rjsf/core/index.d.ts"],"map":"{\"version\":3,\"file\":\"TextWidget.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/TextWidget/TextWidget.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,SAEN,MAAM,6BAA6B,CAAC;AAErC,OAAO,EAAe,KAAK,EAAE,MAAM,YAAY,CAAC;AAEhD,MAAM,EAAE,eAAe,EAAE,GAAG,KAAK,CAAC;AAIlC,MAAM,UAAU,GAAG,CAAC,EAClB,EAAE,EACF,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,IAAI,EACJ,KAAK,EACL,KAAK,EACL,QAAQ,EACR,MAAM,EACN,OAAO,EACP,SAAS,EACT,OAAO,EACP,MAAM,EACN,QAAQ,EACR,SAAS,GAAG,EAAE,EACd,WAAW,EACX,QAAQ,EAAE,mEAAmE;AAC7E,GAAG,cAAc,EACD,EAAE,EAAE;IACpB,MAAM,SAAS,GAAG,CAAC,EACjB,MAAM,EAAE,EAAE,KAAK,EAAE,GACmB,EAAE,EAAE,CACxC,QAAQ,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACtD,MAAM,OAAO,GAAG,CAAC,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAsC,EAAE,EAAE,CAC5E,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IACpB,MAAM,QAAQ,GAAG,CAAC,EAChB,MAAM,EAAE,EAAE,KAAK,EAAE,GACkB,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IAE7D,MAAM,YAAY,GAAG,eAAe,CAClC,MAAM,EACN,QAAQ;IACR,wBAAwB;KACzB,CAAC;IACF,MAAM,SAAS,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAE,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE,CAAA;IAEzF,OAAO,CACL,oBAAC,SAAS,kBACR,EAAE,EAAE,EAAE,EACN,WAAW,EAAE,WAAW,EACxB,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EACnD,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,QAAQ,IAAI,QAAQ,EAC9B,IAAI,EAAE,SAAmB,EACzB,KAAK,EAAE,KAAK,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EACxC,KAAK,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,EAC3B,QAAQ,EAAE,SAAS,EACnB,MAAM,EAAE,OAAO,EACf,OAAO,EAAE,QAAQ,IACZ,cAAiC,EACtC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,UAAU,CAAC\"}","dts":{"name":"C:/dev/react-jsonschema-form/packages/material-ui/TextWidget/TextWidget.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport { StandardTextFieldProps as TextFieldProps } from \"@material-ui/core/TextField\";\r\nimport { WidgetProps } from \"@rjsf/core\";\r\nexport declare type TextWidgetProps = WidgetProps & Pick<TextFieldProps, Exclude<keyof TextFieldProps, 'onBlur' | 'onFocus'>>;\r\ndeclare const TextWidget: ({ id, placeholder, required, readonly, disabled, type, label, value, onChange, onBlur, onFocus, autofocus, options, schema, uiSchema, rawErrors, formContext, registry, ...textFieldProps }: TextWidgetProps) => JSX.Element;\r\nexport default TextWidget;\r\n"}}
